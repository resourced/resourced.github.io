{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nResourceD is a complete monitoring and alerting solution for DevOps everywhere. It is an open source project with MIT license.\n\n\nComparison to (plenty of) other OSS solutions\n\n\n\n\n\n\nEasy to install. Just download the precompiled binaries, change the default config, and run. No need to even \nyum install\n.\n\n\n\n\n\n\nGood looking, easy to use, UI.\n\n\n\n\n\n\nIt comprises of only three components: Agent, Master, and PostgreSQL. That's it. Other solutions are often complex with a lot of config files to manage.\n\n\n\n\n\n\nPostgreSQL is well understood and there are plenty of documentation on how to scale it and make it highly available.\n\n\n\n\n\n\nActive check is a first class citizen. Some other solutions often provide only passive checks.\n\n\n\n\n\n\nThe agent offers a multiple of useful solutions under one binary. There's no need to install multiple daemons on every host.\n\n\n\n\n\n\nThe agent can proactively do things for you (based on boolean expressions on its data). Why alerts when it can solve its own problem?\n\n\n\n\n\n\nAgent Features\n\n\n\n\n\n\nIt gathers a lot of systems metrics.\n\n\n\n\n\n\nIt supports gathering popular application metrics such as HAProxy, Varnish, or Memcached.\n\n\n\n\n\n\nIt tails log files and forward them to master. These loglines can then be used to create alerts.\n\n\n\n\n\n\nIt can forwards existing Graphite metrics to master. These metrics can then be used to create alerts.\n\n\n\n\n\n\nIt is easy to extend with scripting languages.\n\n\n\n\n\n\nIt can send passive checks directly from the host.\n\n\n\n\n\n\nIt can execute scripts based on boolean expressions on its data.\n\n\n\n\n\n\nIt is useful without the master, it can report to other services.\n\n\n\n\n\n\nMaster Features\n\n\n\n\n\n\nIt receives a lot of useful data from the agents: inventory, metrics, and loglines.\n\n\n\n\n\n\nIt creates active checks based on any of these data.\n\n\n\n\n\n\nIt can also create active checks on ping, SSH, and HTTP.\n\n\n\n\n\n\nWhen you run multiple masters, the check jobs are distributed equally among them. There's no single point of failure.\n\n\n\n\n\n\nIt provides you with SQL-like statements to query all of its data.\n\n\n\n\n\n\nIt allows you to view and search logs within time range.\n\n\n\n\n\n\nLinks\n\n\n\n\n\n\nAgent Repo\n\n\n\n\n\n\nAgent GoDoc\n\n\n\n\n\n\nMaster Repo\n\n\n\n\n\n\nMaster GoDoc", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "ResourceD is a complete monitoring and alerting solution for DevOps everywhere. It is an open source project with MIT license.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#comparison-to-plenty-of-other-oss-solutions", 
            "text": "Easy to install. Just download the precompiled binaries, change the default config, and run. No need to even  yum install .    Good looking, easy to use, UI.    It comprises of only three components: Agent, Master, and PostgreSQL. That's it. Other solutions are often complex with a lot of config files to manage.    PostgreSQL is well understood and there are plenty of documentation on how to scale it and make it highly available.    Active check is a first class citizen. Some other solutions often provide only passive checks.    The agent offers a multiple of useful solutions under one binary. There's no need to install multiple daemons on every host.    The agent can proactively do things for you (based on boolean expressions on its data). Why alerts when it can solve its own problem?", 
            "title": "Comparison to (plenty of) other OSS solutions"
        }, 
        {
            "location": "/#agent-features", 
            "text": "It gathers a lot of systems metrics.    It supports gathering popular application metrics such as HAProxy, Varnish, or Memcached.    It tails log files and forward them to master. These loglines can then be used to create alerts.    It can forwards existing Graphite metrics to master. These metrics can then be used to create alerts.    It is easy to extend with scripting languages.    It can send passive checks directly from the host.    It can execute scripts based on boolean expressions on its data.    It is useful without the master, it can report to other services.", 
            "title": "Agent Features"
        }, 
        {
            "location": "/#master-features", 
            "text": "It receives a lot of useful data from the agents: inventory, metrics, and loglines.    It creates active checks based on any of these data.    It can also create active checks on ping, SSH, and HTTP.    When you run multiple masters, the check jobs are distributed equally among them. There's no single point of failure.    It provides you with SQL-like statements to query all of its data.    It allows you to view and search logs within time range.", 
            "title": "Master Features"
        }, 
        {
            "location": "/#links", 
            "text": "Agent Repo    Agent GoDoc    Master Repo    Master GoDoc", 
            "title": "Links"
        }, 
        {
            "location": "/gallery/", 
            "text": "Signup Page\n\n\n\n\nAccess Token Management\n\n\n\n\nView Server Data\n\n\nAny numeric server data can be used to create graphs. Notice that you can query server data using SQL-like statement.\n\n\n\n\nGraphs Dashboard\n\n\n\n\nDashboard is responsive to any size screens. Graphs are draggable for sorting.\n\n\n\n\nLog Search\n\n\nUse SQL-like statement to search through your logs.\n\n\n\n\nChecks\n\n\nMinimize noise and maximize awareness by combining multiple checks with boolean expressions.\n\n\n\n\nCreate your own escalation policy.", 
            "title": "Gallery"
        }, 
        {
            "location": "/gallery/#signup-page", 
            "text": "", 
            "title": "Signup Page"
        }, 
        {
            "location": "/gallery/#access-token-management", 
            "text": "", 
            "title": "Access Token Management"
        }, 
        {
            "location": "/gallery/#view-server-data", 
            "text": "Any numeric server data can be used to create graphs. Notice that you can query server data using SQL-like statement.", 
            "title": "View Server Data"
        }, 
        {
            "location": "/gallery/#graphs-dashboard", 
            "text": "Dashboard is responsive to any size screens. Graphs are draggable for sorting.", 
            "title": "Graphs Dashboard"
        }, 
        {
            "location": "/gallery/#log-search", 
            "text": "Use SQL-like statement to search through your logs.", 
            "title": "Log Search"
        }, 
        {
            "location": "/gallery/#checks", 
            "text": "Minimize noise and maximize awareness by combining multiple checks with boolean expressions.   Create your own escalation policy.", 
            "title": "Checks"
        }, 
        {
            "location": "/api-authentication/", 
            "text": "Every HTTP request requires AccessToken passed as basic auth user. Users can create a new AccessToken from inside the web application: \nyou@example.com \n Clusters\n menu.\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/hosts')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/hosts', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: http://localhost:55655/api/hosts", 
            "title": "API Doc: Auth"
        }, 
        {
            "location": "/api-hosts-get/", 
            "text": "GET http://localhost:55655/api/hosts\n\n\nGet all hosts data.\n\n\nQuery Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nq\n\n\n''\n\n\nString\n\n\nAllows user to filter hosts data using SQL-like statement.\n\n\n\n\n\n\n\n\nQuery Language\n\n\nThere are 3 fields to query host data on: hostname, tags, and JSON path.\n\n\nLimitation:\n You can only use \nAND\n conjunctive operators, for now.\n\n\nQuery by hostname\n\n\n\n\n\n\nExact match: \nhostname = \"localhost\"\n\n\n\n\n\n\nStarts-with match: \nhostname ~^ \"awesome-app-\"\n\n\n\n\n\n\nRegex match, case insensitive: \nhostname ~* \"awesome-app-\"\n\n\n\n\n\n\nRegex match, case sensitive: \nhostname ~ \"awesome-app-\"\n\n\n\n\n\n\nRegex match negation, case sensitive: \nhostname !~ \"awesome-app-\"\n\n\n\n\n\n\nRegex match negation, case insensitive: \nhostname !~* \"awesome-app-\"\n\n\n\n\n\n\nQuery by tags\n\n\n\n\n\n\nExact match: \ntags.mysql = 5.6.24\n\n\n\n\n\n\nMultiple exact match: \ntags.mysql = 5.6.24 and tags.redis = 3.0.1\n\n\n\n\n\n\nQuery by JSON path\n\n\nTo craft JSON path query, start with ResourceD path and then use \".\" delimited separator as you get deeper into the JSON structure.\n\n\nFor example, let's say your resourced agent shipped \n/free\n data: \n{\"/free\": {\"Data\": {\"Swap\": {\"Free\": 0, \"Used\": 0, \"Total\": 0}, \"Memory\": {\"Free\": 1346609152}}}\n\n\nNote:\n Data is just an envelope, don't include it in your query.\n\n\nYou can then query \nSwap -\n Used\n this way: \n/free.Swap.Used \n 10000000\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/hosts')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/hosts', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: http://localhost:55655/api/hosts\n\n\n\n\nReturn Payload\n\n\n[\n  {\n    \nClusterID\n: \u200b1,\n    \nHostname\n: \nmy-mac-mini.local\n,\n    \nUpdated\n: \n2016-05-15T23:47:01.441652Z\n,\n    \nTags\n: {\n      \nos\n: \nOS X Yosemite\n,\n      \npostgres\n: \n9.4.2\n,\n      \nredis\n: \n3.0.1\n,\n      \nrole\n: \nhome-dev\n\n    },\n    \nData\n: {\n      \n/free\n: {\n        \nSwap\n: {\n            \nFree\n: \u200b1770520576,\n            \nUsed\n: \u200b376963072,\n            \nTotal\n: \u200b2147483648,\n            \nFreeGB\n: \u200b1,\n            \nFreeMB\n: \u200b1770,\n            \nUsedGB\n: \u200b0,\n            \nUsedMB\n: \u200b376,\n            \nTotalGB\n: \u200b2,\n            \nTotalMB\n: \u200b2147,\n            \nFreePercent\n: \u200b82\n        },\n        \nMemory\n: {\n          \nFree\n: \u200b685666304,\n          \nUsed\n: \u200b7904268288,\n          \nTotal\n: \u200b8589934592,\n          \nFreeGB\n: \u200b0,\n          \nFreeMB\n: \u200b685,\n          \nUsedGB\n: \u200b7,\n          \nUsedMB\n: \u200b7904,\n          \nTotalGB\n: \u200b8,\n          \nTotalMB\n: \u200b8589,\n          \nActualFree\n: \u200b3156926464,\n          \nActualUsed\n: \u200b5433008128,\n          \nFreePercent\n: \u200b7,\n          \nUsedPercent\n: \u200b92,\n          \nActualFreeGB\n: \u200b3,\n          \nActualFreeMB\n: \u200b3156,\n          \nActualUsedGB\n: \u200b5,\n          \nActualUsedMB\n: \u200b5433,\n          \nActualFreePercent\n: \u200b36,\n          \nActualUsedPercent\n: \u200b63\n        }\n      },\n      \n/uptime\n: {\n        \nUptime\n: \n24 days, 16:55\n,\n        \nTimeZone\n: \nPDT\n,\n        \nLoadAvg1m\n: \u200b1.6044921875,\n        \nLoadAvg5m\n: \u200b2.099609375,\n        \nLoadAvg15m\n: \u200b2.072265625,\n        \nCurrentTime\n: \n16:46:58\n,\n        \nCurrentTimeUnixNano\n: \u200b1463356018787249200\n      }\n    }\n  },\n  {\n    \nClusterID\n: \u200b1,\n    \nHostname\n: \nmy-mac-pro.local\n,\n    \nUpdated\n: \n2016-05-15T23:47:01.441652Z\n,\n    \nTags\n: {\n      \nos\n: \nOS X Yosemite\n,\n      \npostgres\n: \n9.5.1\n,\n      \nredis\n: \n3.0.1\n,\n      \nrole\n: \nhome-dev\n\n    },\n    \nData\n: {\n      \ntruncated\n: \n...\n\n    }\n  }\n]", 
            "title": "API Doc: GET /api/hosts"
        }, 
        {
            "location": "/api-hosts-get/#query-parameters", 
            "text": "Parameter  Default  Type  Description      q  ''  String  Allows user to filter hosts data using SQL-like statement.", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api-hosts-get/#query-language", 
            "text": "There are 3 fields to query host data on: hostname, tags, and JSON path.  Limitation:  You can only use  AND  conjunctive operators, for now.  Query by hostname    Exact match:  hostname = \"localhost\"    Starts-with match:  hostname ~^ \"awesome-app-\"    Regex match, case insensitive:  hostname ~* \"awesome-app-\"    Regex match, case sensitive:  hostname ~ \"awesome-app-\"    Regex match negation, case sensitive:  hostname !~ \"awesome-app-\"    Regex match negation, case insensitive:  hostname !~* \"awesome-app-\"    Query by tags    Exact match:  tags.mysql = 5.6.24    Multiple exact match:  tags.mysql = 5.6.24 and tags.redis = 3.0.1    Query by JSON path  To craft JSON path query, start with ResourceD path and then use \".\" delimited separator as you get deeper into the JSON structure.  For example, let's say your resourced agent shipped  /free  data:  {\"/free\": {\"Data\": {\"Swap\": {\"Free\": 0, \"Used\": 0, \"Total\": 0}, \"Memory\": {\"Free\": 1346609152}}}  Note:  Data is just an envelope, don't include it in your query.  You can then query  Swap -  Used  this way:  /free.Swap.Used   10000000  # Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/hosts')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =  uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend  # Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/hosts', auth=HTTPBasicAuth('accesstoken', ''))  # cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: http://localhost:55655/api/hosts", 
            "title": "Query Language"
        }, 
        {
            "location": "/api-hosts-get/#return-payload", 
            "text": "[\n  {\n     ClusterID : \u200b1,\n     Hostname :  my-mac-mini.local ,\n     Updated :  2016-05-15T23:47:01.441652Z ,\n     Tags : {\n       os :  OS X Yosemite ,\n       postgres :  9.4.2 ,\n       redis :  3.0.1 ,\n       role :  home-dev \n    },\n     Data : {\n       /free : {\n         Swap : {\n             Free : \u200b1770520576,\n             Used : \u200b376963072,\n             Total : \u200b2147483648,\n             FreeGB : \u200b1,\n             FreeMB : \u200b1770,\n             UsedGB : \u200b0,\n             UsedMB : \u200b376,\n             TotalGB : \u200b2,\n             TotalMB : \u200b2147,\n             FreePercent : \u200b82\n        },\n         Memory : {\n           Free : \u200b685666304,\n           Used : \u200b7904268288,\n           Total : \u200b8589934592,\n           FreeGB : \u200b0,\n           FreeMB : \u200b685,\n           UsedGB : \u200b7,\n           UsedMB : \u200b7904,\n           TotalGB : \u200b8,\n           TotalMB : \u200b8589,\n           ActualFree : \u200b3156926464,\n           ActualUsed : \u200b5433008128,\n           FreePercent : \u200b7,\n           UsedPercent : \u200b92,\n           ActualFreeGB : \u200b3,\n           ActualFreeMB : \u200b3156,\n           ActualUsedGB : \u200b5,\n           ActualUsedMB : \u200b5433,\n           ActualFreePercent : \u200b36,\n           ActualUsedPercent : \u200b63\n        }\n      },\n       /uptime : {\n         Uptime :  24 days, 16:55 ,\n         TimeZone :  PDT ,\n         LoadAvg1m : \u200b1.6044921875,\n         LoadAvg5m : \u200b2.099609375,\n         LoadAvg15m : \u200b2.072265625,\n         CurrentTime :  16:46:58 ,\n         CurrentTimeUnixNano : \u200b1463356018787249200\n      }\n    }\n  },\n  {\n     ClusterID : \u200b1,\n     Hostname :  my-mac-pro.local ,\n     Updated :  2016-05-15T23:47:01.441652Z ,\n     Tags : {\n       os :  OS X Yosemite ,\n       postgres :  9.5.1 ,\n       redis :  3.0.1 ,\n       role :  home-dev \n    },\n     Data : {\n       truncated :  ... \n    }\n  }\n]", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-metrics-get/", 
            "text": "GET http://localhost:55655/api/metrics/{id:[0-9]+}\n\n\nGet all metrics data by id.\n\n\nQuery Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\nto\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1?from=1463551343\nto=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1?from=1463551343\nto=1463551643', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1?from=1463551343\nto=1463551643'\n\n\n\n\nReturn Payload\n\n\n[\n   {\n      \nname\n:\nlocalhost.local\n,\n      \ndata\n:[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "API Doc: GET /api/metrics/{id:[0-9]+}"
        }, 
        {
            "location": "/api-metrics-get/#query-parameters", 
            "text": "Parameter  Default  Type  Description      from  ''  UNIX epoch  Allows user to provide a time range.    to  ''  UNIX epoch  Allows user to provide a time range.     # Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1?from=1463551343 to=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =  uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend  # Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1?from=1463551343 to=1463551643', auth=HTTPBasicAuth('accesstoken', ''))  # cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1?from=1463551343 to=1463551643'", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api-metrics-get/#return-payload", 
            "text": "[\n   {\n       name : localhost.local ,\n       data :[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-metrics-15m-get/", 
            "text": "GET http://localhost:55655/api/metrics/{id:[0-9]+}/15m\n\n\nGet all metrics data by id aggregate per 15 minutes.\n\n\nQuery Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\nto\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1/15m?from=1463551343\nto=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1/15m?from=1463551343\nto=1463551643', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1/15m?from=1463551343\nto=1463551643'\n\n\n\n\nReturn Payload\n\n\nLimitation:\n Currently, it only returns the average values.\n\n\n[\n   {\n      \nname\n:\nlocalhost.local\n,\n      \ndata\n:[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "API Doc: GET /api/metrics/{id:[0-9]+}/15m"
        }, 
        {
            "location": "/api-metrics-15m-get/#query-parameters", 
            "text": "Parameter  Default  Type  Description      from  ''  UNIX epoch  Allows user to provide a time range.    to  ''  UNIX epoch  Allows user to provide a time range.     # Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1/15m?from=1463551343 to=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =  uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend  # Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1/15m?from=1463551343 to=1463551643', auth=HTTPBasicAuth('accesstoken', ''))  # cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1/15m?from=1463551343 to=1463551643'", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api-metrics-15m-get/#return-payload", 
            "text": "Limitation:  Currently, it only returns the average values.  [\n   {\n       name : localhost.local ,\n       data :[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-metrics-host-get/", 
            "text": "GET http://localhost:55655/api/metrics/{id:[0-9]+}/hosts/{host}\n\n\nGet all metrics data by id.\n\n\nQuery Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\nto\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1/hosts/localhost?from=1463551343\nto=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1/hosts/localhost?from=1463551343\nto=1463551643', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1/hosts/localhost?from=1463551343\nto=1463551643'\n\n\n\n\nReturn Payload\n\n\n[\n   {\n      \nname\n:\nlocalhost\n,\n      \ndata\n:[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "API Doc: GET /api/metrics/{id:[0-9]+}/hosts/{host}"
        }, 
        {
            "location": "/api-metrics-host-get/#query-parameters", 
            "text": "Parameter  Default  Type  Description      from  ''  UNIX epoch  Allows user to provide a time range.    to  ''  UNIX epoch  Allows user to provide a time range.     # Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1/hosts/localhost?from=1463551343 to=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =  uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend  # Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1/hosts/localhost?from=1463551343 to=1463551643', auth=HTTPBasicAuth('accesstoken', ''))  # cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1/hosts/localhost?from=1463551343 to=1463551643'", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api-metrics-host-get/#return-payload", 
            "text": "[\n   {\n       name : localhost ,\n       data :[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-metrics-host-15m-get/", 
            "text": "GET http://localhost:55655/api/metrics/{id:[0-9]+}/hosts/{host}/15m\n\n\nGet all metrics data by id aggregate per 15 minutes.\n\n\nQuery Parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDefault\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\nto\n\n\n''\n\n\nUNIX epoch\n\n\nAllows user to provide a time range.\n\n\n\n\n\n\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1/hosts/localhost/15m?from=1463551343\nto=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1/hosts/localhost/15m?from=1463551343\nto=1463551643', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1/hosts/localhost/15m?from=1463551343\nto=1463551643'\n\n\n\n\nReturn Payload\n\n\nLimitation:\n Currently, it only returns the average values.\n\n\n[\n   {\n      \nname\n:\nlocalhost\n,\n      \ndata\n:[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "API Doc: GET /api/metrics/{id:[0-9]+}/hosts/{host}/15m"
        }, 
        {
            "location": "/api-metrics-host-15m-get/#query-parameters", 
            "text": "Parameter  Default  Type  Description      from  ''  UNIX epoch  Allows user to provide a time range.    to  ''  UNIX epoch  Allows user to provide a time range.     # Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/metrics/1/hosts/localhost/15m?from=1463551343 to=1463551643')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =  uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n  request.basic_auth 'accesstoken', ''\n\n  response = http.request request\nend  # Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.get('http://localhost:55655/api/metrics/1/hosts/localhost/15m?from=1463551343 to=1463551643', auth=HTTPBasicAuth('accesstoken', ''))  # cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: 'http://localhost:55655/api/metrics/1/hosts/localhost/15m?from=1463551343 to=1463551643'", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api-metrics-host-15m-get/#return-payload", 
            "text": "Limitation:  Currently, it only returns the average values.  [\n   {\n       name : localhost ,\n       data :[\n         [\n            1463551368452,\n            2.4794921875\n         ],\n         [\n            1463551398426,\n            2.08056640625\n         ],\n         [\n            1463551428441,\n            1.76806640625\n         ],\n         [\n            1463551458452,\n            1.78466796875\n         ],\n         [\n            1463551488466,\n            1.7685546875\n         ],\n         [\n            1463551518507,\n            1.56787109375\n         ],\n         [\n            1463551548526,\n            1.6630859375\n         ],\n         [\n            1463551578536,\n            1.56005859375\n         ],\n         [\n            1463551608543,\n            1.40283203125\n         ],\n         [\n            1463551638565,\n            1.3271484375\n         ]\n      ]\n   }\n]", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-events-post/", 
            "text": "POST http://localhost:55655/api/events\n\n\nSubmit an event object.\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/events')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n    request = Net::HTTP::Post.new(uri.request_uri, initheader = {'Content-Type' =\n'application/json'})\n    request.basic_auth 'accesstoken', ''\n    request.body = '{\nfrom\n: 1463551343, \nto\n: 1463551643, \ndescription\n: \nDeployed app server\n}'\n\n    response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.post(\n    'http://localhost:55655/api/events',\n    auth=HTTPBasicAuth('accesstoken', ''),\n    body={\nfrom\n: 1463551343, \nto\n: 1463551643, \ndescription\n: \nDeployed app server\n}\n)\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: -X POST \\\n    -H \nAccept: application/json\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nfrom\n: 1463551343, \nto\n: 1463551643, \ndescription\n: \nDeployed app server\n}' \\\n    'http://localhost:55655/api/events'\n\n\n\n\nSend Payload\n\n\n{\n    \nfrom\n: 1463551343,\n    \nto\n: 1463551643,\n    \ndescription\n: \nDeployed app server\n\n}\n\n\n\n\nReturn Payload\n\n\n{\n    \nID\n: 1,\n    \nClusterID\n: 1,\n    \nCreatedFrom\n: 1463551343,\n    \nCreatedTo\n: 1463551643,\n    \nDescription\n: \nDeployed app server\n\n}", 
            "title": "API Doc: POST /api/events"
        }, 
        {
            "location": "/api-events-post/#send-payload", 
            "text": "{\n     from : 1463551343,\n     to : 1463551643,\n     description :  Deployed app server \n}", 
            "title": "Send Payload"
        }, 
        {
            "location": "/api-events-post/#return-payload", 
            "text": "{\n     ID : 1,\n     ClusterID : 1,\n     CreatedFrom : 1463551343,\n     CreatedTo : 1463551643,\n     Description :  Deployed app server \n}", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-events-delete/", 
            "text": "DELETE http://localhost:55655/api/events/{id:[0-9]+}\n\n\nDelete an event object by id.\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/events/1')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n    request = Net::HTTP::Delete.new(uri.request_uri, initheader = {'Content-Type' =\n'application/json'})\n    request.basic_auth 'accesstoken', ''\n\n    response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.delete('http://localhost:55655/api/events/1', auth=HTTPBasicAuth('accesstoken', ''))\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: -X DELETE 'http://localhost:55655/api/events/1'\n\n\n\n\nSend Payload\n\n\n{\n    \nfrom\n: 1463551343,\n    \nto\n: 1463551643,\n    \ndescription\n: \nDeployed app server\n\n}\n\n\n\n\nReturn Payload\n\n\n{\n    \nID\n: 1,\n    \nMessage\n: \nDeleted event\n\n}", 
            "title": "API Doc: DELETE /api/events/{id:[0-9]+}"
        }, 
        {
            "location": "/api-events-delete/#send-payload", 
            "text": "{\n     from : 1463551343,\n     to : 1463551643,\n     description :  Deployed app server \n}", 
            "title": "Send Payload"
        }, 
        {
            "location": "/api-events-delete/#return-payload", 
            "text": "{\n     ID : 1,\n     Message :  Deleted event \n}", 
            "title": "Return Payload"
        }, 
        {
            "location": "/api-logs-post/", 
            "text": "POST http://localhost:55655/api/logs\n\n\nSubmit loglines.\n\n\n# Ruby example\nrequire 'net/http'\nrequire 'net/https'\n\nuri = URI('http://localhost:55655/api/logs')\n\nNet::HTTP.start(uri.host, uri.port, :use_ssl =\n uri.scheme == 'https') do |http|\n    request = Net::HTTP::Post.new(uri.request_uri, initheader = {'Content-Type' =\n'application/json'})\n    request.basic_auth 'accesstoken', ''\n    request.body = '{\nHost\n: {\nName\n: \nlocalhost\n,\nTags\n: {\nrole\n: \napp-server\n}}, \nData\n: {\nLoglines\n: [\nmultiple loglines in an array\n], \nFilename\n: \nfull path to filename where the logs came from\n}}'\n\n    response = http.request request\nend\n\n\n\n\n# Python example\n# Requests is a 3rd party library\nfrom requests.auth import HTTPBasicAuth\nresponse = requests.post(\n    'http://localhost:55655/api/logs',\n    auth=HTTPBasicAuth('accesstoken', ''),\n    body={\n        \nHost\n: {\n            \nName\n: \nlocalhost\n,\n            \nTags\n: {\n                \nrole\n: \napp-server\n\n            }\n        },\n        \nData\n: {\n            \nLoglines\n: [\nmultiple loglines in an array\n],\n            \nFilename\n: \nfull path to filename where the logs came from\n\n        }\n    }\n)\n\n\n\n\n# cURL example\n# Notice the double colon at the end of Access Token.\ncurl -u accesstoken: -X POST \\\n    -H \nAccept: application/json\n \\\n    -H \nContent-Type: application/json\n \\\n    -d '{\nHost\n: {\nName\n: \nlocalhost\n,\nTags\n: {\nrole\n: \napp-server\n}}, \nData\n: {\nLoglines\n: [\nmultiple loglines in an array\n], \nFilename\n: \nfull path to filename where the logs came from\n}}' \\\n    'http://localhost:55655/api/logs'\n\n\n\n\nSend Payload\n\n\n{\n    \nHost\n: {\n        \nName\n: \nlocalhost\n,\n        \nTags\n: {\n            \nrole\n: \napp-server\n\n        }\n    },\n    \nData\n: {\n        \nLoglines\n: [\nmultiple loglines in an array\n],\n        \nFilename\n: \nfull path to filename where the logs came from\n\n    }\n}\n\n\n\n\nReturn Payload\n\n\n{\n    \nMessage\n: \nSuccess\n\n}", 
            "title": "API Doc: POST /api/logs"
        }, 
        {
            "location": "/api-logs-post/#send-payload", 
            "text": "{\n     Host : {\n         Name :  localhost ,\n         Tags : {\n             role :  app-server \n        }\n    },\n     Data : {\n         Loglines : [ multiple loglines in an array ],\n         Filename :  full path to filename where the logs came from \n    }\n}", 
            "title": "Send Payload"
        }, 
        {
            "location": "/api-logs-post/#return-payload", 
            "text": "{\n     Message :  Success \n}", 
            "title": "Return Payload"
        }
    ]
}